<?xml version="1.0" encoding="utf-8" ?><transcript><text start="0.089" dur="1.321">September 2018.</text><text start="1.41" dur="1.229">I was tired, I was exhausted,</text><text start="2.639" dur="1.931">I’d just got back home from something,</text><text start="4.57" dur="1.55">and I didn&amp;#39;t have the energy to cook.</text><text start="6.12" dur="1.32">So I went to my phone,</text><text start="7.44" dur="3.97">opened up a certain food-delivery app that’s
popular in the UK, and I ordered pizza.</text><text start="11.41" dur="3.75">Now, I know: that food-delivery company’s
employment practices are questionable,</text><text start="15.16" dur="2.65">there are more ethical ways to get dinner
delivered.</text><text start="17.81" dur="1.47">But I was tired, and I was hungry.</text><text start="20.04" dur="2.12">As are a lot of their drivers.</text><text start="22.17" dur="2.24">But that was the Night of the Multiple Orders,</text><text start="24.41" dur="3.73">when a bug in that app meant that some people
around Britain ended up with</text><text start="28.14" dur="2.58">identical food orders
being delivered two or three times,</text><text start="30.73" dur="1.759">and others got nothing at all.</text><text start="32.489" dur="1.951">And I nearly got caught up in the chaos.</text><text start="34.44" dur="1">To explain what happened,</text><text start="35.44" dur="3.44">I need to tell you a story about two generals.</text><text start="40.989" dur="2.551">The Two Generals&amp;#39; Problem is a
classic of computer science,</text><text start="43.55" dur="2.189">and it goes like this: picture a valley.</text><text start="45.739" dur="2.5">In the middle of the valley is a
heavily fortified castle.</text><text start="48.239" dur="2.941">On the edges of the valley are two armies.</text><text start="51.18" dur="4.02">The generals of these armies know that the
only way they can win a battle and overwhelm</text><text start="55.2" dur="3.5">the castle is if they both attack
at the same time.</text><text start="58.7" dur="2.08">A single army isn&amp;#39;t going to make it.</text><text start="60.78" dur="3.51">They need the combined strength from
both sides of the valley to win.</text><text start="64.29" dur="2.19">And the only way they can communicate</text><text start="66.48" dur="3.499">is by sending messengers on a
risky path through the valley.</text><text start="69.979" dur="6.14">And General A won’t know what the right
time is until everyone’s already in position.</text><text start="76.119" dur="2.321">How can those two generals coordinate</text><text start="78.44" dur="1.66">to make sure they
attack at the same time?</text><text start="80.1" dur="2.719">This is a magical computer-science-land problem,
by the way,</text><text start="82.819" dur="4.51">so reasonable suggestions like “semaphore”
or “telescopes” don’t apply.</text><text start="87.329" dur="2.061">On the surface the problem seems trivial.</text><text start="89.39" dur="3.909">General A could just send a message to
General B with a proposed time.</text><text start="93.299" dur="1">Say, 8 o&amp;#39;clock.</text><text start="94.299" dur="2.24">But the messenger has to pass
through the valley,</text><text start="96.539" dur="2.2">and if they’re spotted, they’re, um,</text><text start="98.739" dur="2.95">not going to make it to the other side to
deliver the message.</text><text start="101.689" dur="4.34">So how does General A know that General B
received the message?</text><text start="106.029" dur="1.77">The messenger might not have made it.</text><text start="107.799" dur="1">And if that happens,</text><text start="108.799" dur="3.721">A will attack, B won’t, and they’ll lose.</text><text start="112.52" dur="3.949">So maybe they arrange it so General B has
to send an acknowledgment back,</text><text start="116.469" dur="2.851">and General A will only attack
if that acknowledgement arrives.</text><text start="119.32" dur="1.939">But that now runs into the same problem:</text><text start="121.259" dur="2.74">how does B know that A has received
the acknowledgement?</text><text start="123.999" dur="1.56">If it doesn’t get through,</text><text start="125.559" dur="3.34">A won’t attack, B will, and they’ll lose.</text><text start="128.899" dur="3.101">So, General A could send another acknowledgement
for the acknowledgement.</text><text start="132" dur="2.68">But how do they know that message
has gotten through? Well,</text><text start="134.68" dur="3.479">General B could send an acknowledgment for
the acknowledgement for the acknowledgement</text><text start="138.159" dur="2.401">and so on, and so on, and so on.</text><text start="140.56" dur="3.58">This problem is unsolvable.</text><text start="144.14" dur="2.5">I know, it feels like there should be some
hacky workaround</text><text start="146.64" dur="2.54">like sending 200 messengers,
and sure,</text><text start="149.18" dur="2.4">that would probably work
in the real world.</text><text start="151.58" dur="2.89">But this is magical information-theory
computer-science land.</text><text start="154.47" dur="2">Under these strict rules,</text><text start="156.47" dur="2.83">there is never a guarantee,
there is no certainty,</text><text start="159.3" dur="2.56">there is no arrangement that can be made,
there is no way,</text><text start="161.86" dur="2.92">that the two generals,
the two computers sending data,</text><text start="164.78" dur="4.34">can agree that the message has definitely
been received and acknowledged.</text><text start="169.94" dur="2.52">Now, with computers you’re not usually dealing
with such high stakes.</text><text start="172.47" dur="4.049">If you are in computer science and working
on a problem that involves potential loss of life,</text><text start="176.52" dur="3.38">I really hope you aren&amp;#39;t watching a series
called &amp;quot;The Basics&amp;quot;.</text><text start="179.9" dur="2.08">Anyway. I was ordering food.</text><text start="181.98" dur="1.839">And I put my order together, I tapped ‘pay’,</text><text start="183.819" dur="1.54">I put my fingerprint on my phone’s reader.</text><text start="185.36" dur="2.78">I got the little Apple Pay progress bar,
and the little tick.</text><text start="188.14" dur="3.879">And then I got a message from the app
saying that there had been a problem,</text><text start="192.02" dur="3.28">and my order had failed to go through.
Would I like to try again?</text><text start="195.3" dur="1.38">And I was about to.</text><text start="196.689" dur="1.52">I was about to hit ‘pay’ again.</text><text start="198.209" dur="3.491">And then something, just in the back
of my head, said: hang on.</text><text start="201.7" dur="2.409">There was that little tick saying
payment had worked.</text><text start="204.109" dur="5.291">And I’m enough of a computer nerd to go
&amp;quot;I’m not sure I believe that failed&amp;quot;.</text><text start="209.4" dur="1.8">So I checked the ‘order history’ page.</text><text start="211.2" dur="3.129">It took a few tries to load,
but when it finally did, there was my order.</text><text start="214.329" dur="3.52">Processing. It had gone through, but
the acknowledgement hadn’t come back.</text><text start="217.849" dur="2.14">Or, rather, something had gone wrong
on the app’s servers,</text><text start="219.989" dur="3.39">and the logic they’d written
thought it had failed when it hadn’t.</text><text start="223.379" dur="2.911">So I sat tight,
I hoped that my food would arrive,</text><text start="226.29" dur="3.71">and I figured that the engineers were probably
having a very bad day.</text><text start="230" dur="1.72">They really were.</text><text start="231.72" dur="1.61">Because I wasn&amp;#39;t the only one.</text><text start="233.33" dur="3.314">People all over the UK ordering via the app
were going to the payment screen,</text><text start="236.644" dur="2.635">hitting the button and getting
&amp;quot;try again&amp;quot;.</text><text start="239.279" dur="3.1">And a lot of them did.
Again, and again, and again.</text><text start="242.379" dur="2.59">They were General A,
and the app’s server was General B,</text><text start="244.969" dur="3.75">and they were part of a real-life,
complicated version of the Two Generals&amp;#39; problem.</text><text start="248.719" dur="2.121">Imagine all the customers as General A,</text><text start="250.84" dur="3.409">sending message after message to General B.
B received the messages,</text><text start="254.249" dur="2.33">dutifully took the money from the credit card
every time --</text><text start="256.579" dur="1.511">they attacked --</text><text start="258.09" dur="4.93">but something had happened that stopped
the confirmation message getting through.</text><text start="263.02" dur="2.54">According to the flood of angry reports on
Twitter,</text><text start="265.56" dur="4.12">sometimes the restaurant would realise the
problem and just send one order.</text><text start="269.68" dur="1.66">Sometimes the restaurant wouldn’t realise,</text><text start="271.34" dur="3.62">and three different drivers would arrive
with three identical orders.</text><text start="274.96" dur="1.739">Sometimes no food would arrive at all.</text><text start="276.699" dur="2.261">The app’s customer service line was swamped.</text><text start="278.96" dur="3.62">To be clear: this was not the sort of thing
that is one engineer’s fault.</text><text start="282.58" dur="2.2">When something goes this drastically wrong,</text><text start="284.78" dur="3.729">there have been many poor decisions made over
a long period of time.</text><text start="288.509" dur="4.111">A single human error is never a root cause.</text><text start="292.62" dur="1.579">So what else could the app team have done?</text><text start="294.2" dur="3.46">How can you solve the Two Generals&amp;#39; problem
in the real world?</text><text start="297.66" dur="4.08">Well, first, maybe no-one should have
been able to place two identical orders</text><text start="301.74" dur="2.18">on the same credit card,
for the same restaurant,</text><text start="303.92" dur="1.58">within a few minutes of each other.</text><text start="305.5" dur="3.04">That seems like the sort of thing there should
have been a check for?</text><text start="308.54" dur="4.37">But the real solution is an
“idempotency token”, or an “idempotency key”.</text><text start="312.91" dur="3.8">This is a unique value generated on
the app, or on the web site:</text><text start="316.71" dur="1.859">and it’s a shopping cart ID, basically,</text><text start="318.569" dur="1.771">and it’s sent along with the order.</text><text start="320.34" dur="2.009">it&amp;#39;s not just for shopping carts, though:</text><text start="322.349" dur="4.361">the idempotency token could be attached to
instructions to delete the oldest log file,</text><text start="326.71" dur="1.09">or send a text message,</text><text start="327.8" dur="3.239">or anything that you only want to happen once.</text><text start="331.039" dur="2.991">The server stores the idempotency key to keep
track of the request.</text><text start="334.03" dur="3.15">And if another request arrives with the same
key attached,</text><text start="337.18" dur="3.209">then the server knows it’s already
dealt with that request.</text><text start="340.389" dur="4.271">So it doesn’t fulfill it again; instead it
knows that the reply didn’t get through,</text><text start="344.66" dur="3.14">so it just sends back a copy of that first
acknowledgement again.</text><text start="347.8" dur="3.13">Now, that still won’t help if none
of the messengers get through,</text><text start="350.93" dur="1.68">if the connection completely fails,</text><text start="352.61" dur="4.01">but for real-world problems,
humans will notice that.</text><text start="356.62" dur="3.76">Idempotence means that you can request the
same thing multiple times</text><text start="360.38" dur="2.43">and it’ll only ever happen once.</text><text start="362.81" dur="3.419">That’s the way to fix the
Two Generals&amp;#39; Problem.</text><text start="366.229" dur="1">I was lucky.</text><text start="367.229" dur="1.491">I placed one order,
I was charged for one order,</text><text start="368.72" dur="3.33">and one order of food arrived
half an hour later.</text><text start="372.05" dur="3.05">Next time, I’ll just cook for myself.</text><text start="375.1" dur="3.38">This series of The Basics is sponsored by
Dashlane, the password manager.</text><text start="378.48" dur="3.5">I mentioned in the previous sponsored section
that they sync all your passwords</text><text start="381.98" dur="2.2">and payment details between
all your devices</text><text start="384.18" dur="2.88">without ever
knowing those passwords.</text><text start="387.06" dur="3.11">Which sounds a bit like magic.</text><text start="390.17" dur="3.619">When you sign up to Dashlane, you choose a
Master Password.</text><text start="393.789" dur="1.261">And incidentally,</text><text start="395.05" dur="4.369">you can do that by going to
dashlane.com/tomscott for a free 30-day trial.</text><text start="399.419" dur="1.381">Anyway, when you sign up,</text><text start="400.8" dur="1.88">you pick a single Master Password,</text><text start="402.68" dur="2.389">and that is never transmitted over the internet.</text><text start="405.069" dur="2.491">Not even to Dashlane,
not to their servers, nowhere.</text><text start="407.56" dur="2.139">If you don’t know that password,</text><text start="409.699" dur="3.101">all that private data just looks
like random noise.</text><text start="412.8" dur="3.095">So: when you sign up to a new website and
Dashlane generates</text><text start="415.895" dur="2.445">a long, complicated password
for you,</text><text start="418.34" dur="4.03">it is bundled up and encrypted using your
master password, that only you know.</text><text start="422.37" dur="3.31">That encryption takes just long enough,
a few fractions of a second,</text><text start="425.68" dur="3.12">that there’s no way to
brute-force it back open.</text><text start="428.8" dur="2.16">That encrypted bundle gets sent to Dashlane:</text><text start="430.96" dur="4.22">they just see random noise with a label saying
‘please synchronise this’.</text><text start="435.18" dur="2.489">So they pass the bundle on to your other devices,</text><text start="437.669" dur="4.191">and those devices, and only those devices,
can decrypt it because, at some point,</text><text start="441.86" dur="2.9">you’re going to open up the app and type
in your Master Password.</text><text start="444.76" dur="2.95">In truth, it’s actually a little
more secure than that,</text><text start="447.71" dur="4.31">because behind-the-scenes they also generate
a different key for each device you log in to,</text><text start="452.02" dur="2.02">but that is a whole other level of security</text><text start="454.04" dur="2.89">that I have actually found it impossible to
explain in a script.</text><text start="456.93" dur="4.1">But, in the massively unlikely event that someone
did compromise Dashlane’s servers,</text><text start="461.03" dur="3.05">or bribe some employee, it wouldn’t work.</text><text start="464.08" dur="3.829">All they could do is watch those packets of
random noise get shuffled around.</text><text start="467.909" dur="2.54">All your data stays on your own devices.</text><text start="470.449" dur="2.431">Which means,
if you lose your Master Password,</text><text start="472.88" dur="1.46">Dashlane can’t help you.</text><text start="474.34" dur="1">But that’s fine,</text><text start="475.34" dur="3.19">because now you’ve just got a single password
to remember.</text><text start="478.53" dur="3.69">That is massively more secure than reusing
the same password</text><text start="482.22" dur="2.949">or variations on a password
everywhere online.</text><text start="485.169" dur="3.181">Like I said last time:
you should use a password manager.</text><text start="488.35" dur="3.31">So: dashlane.com/tomscott for a
free 30-day trial of Dashlane Premium,</text><text start="491.66" dur="3.789">and if you like it you can use the code “tomscott”
for 10% off at purchase.</text></transcript>